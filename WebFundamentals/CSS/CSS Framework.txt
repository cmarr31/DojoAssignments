CSS Framework

A CSS framework is a pre-defined CSS file that is meant to allow for easier, 
more standards-compliant web design. 
Some widely used examples are Twitter Bootstrap or Foundation, 
both of which contain at least a grid system. 

CSS frameworks' usual components are:

Grid System
Reset stylesheet ( A pre-defined CSS file that reduces browser inconsistencies in things like default line heights, margins, and font sizes of headings, etc. )
Typography
Icons
CSS helper classes ( commonly used are .row, .container, .col, etc)
Buttons, tooltips, form elements
jQueryUI like Accordion, tabs, slideshow, or modal.

Why use front-end frameworks?
Saves time.
Community support and extension.
Cross-browser friendly.
Documentation

What are the disadvantages of using front-end frameworks?
Excessive codes
Learning curve
Less flexibility

Highly Recommended CSS Frameworks

Twitter Bootstrap - It's the world's most popular HTML, CSS, and JS framework for developing responsive layouts. 
Most of the premium layouts out there like Wrapbootstrap and Start Bootstrap use Twitter Bootstrap which you can purchase and use for your own projects.
 
There is also a website called Bootsnipp where it houses snippets of customized website modules like forms, email templates, 
modals that uses twitter bootstrap as its CSS framework, all free to use.

Foundation - It's the most advanced responsive CSS framework in the world. 
Popular websites that use Foundation framework are starwars.com, vans.com, jquery.com, etc.

Materialize CSS - A modern responsive front-end framework based on Material Design that's created and designed by Google.

One of the great reasons why a CSS framework is a good choice for your project is that you don't have to think about CSS Reset, 
Responsive Grids, Typography, Media Queries, and how to make your page render the same in all browsers. 

Take note: Using a CSS framework never guarantees you from making your page render the same in all browsers. 
The goal of identical in every browser is, in practical terms, unachievable because you cannot control the client. 
Case in point: fonts. 
This is the "art" part of CSS: Being able to be flexible in your design 
such that variations between browsers, operating systems, and devices are handled elegantly.

How to use these frameworks?
First, you need to decide what framework you want to use. 

Let's try Bootstrap.
Put a link tag somewhere within your <head> tag: 
<link rel="stylesheet" href="maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"> <!-- add https:// before the website name-->

Done! You are now using twitter bootstrap, 
and that means some CSS codes like responsive grid settings, media queries, typography settings, CSS reset 
(we will discuss that later) is now being applied to your page. 

If you put some lorem ipsum on your page, you will notice that it looks different and is positioned differently by default when using bootstrap:

Copy and paste the codes below to have a look at Bootstrap's grid system:

<div class="row">
  <div class="col-md-1">.col-md-1</div>
  <div class="col-md-1">.col-md-1</div>
  <div class="col-md-1">.col-md-1</div>
  <div class="col-md-1">.col-md-1</div>
  <div class="col-md-1">.col-md-1</div>
  <div class="col-md-1">.col-md-1</div>
  <div class="col-md-1">.col-md-1</div>
  <div class="col-md-1">.col-md-1</div>
  <div class="col-md-1">.col-md-1</div>
  <div class="col-md-1">.col-md-1</div>
  <div class="col-md-1">.col-md-1</div>
  <div class="col-md-1">.col-md-1</div>
</div>
<div class="row">
  <div class="col-md-8">.col-md-8</div>
  <div class="col-md-4">.col-md-4</div>
</div>
<div class="row">
  <div class="col-md-4">.col-md-4</div>
  <div class="col-md-4">.col-md-4</div>
  <div class="col-md-4">.col-md-4</div>
</div>
<div class="row">
  <div class="col-md-6">.col-md-6</div>
  <div class="col-md-6">.col-md-6</div>
</div>

Remember our grid system? Bootstrap uses unique class names as well to make your page respond to different screen sizes. 
In this case, bootstrap uses sm (small), md (medium), and lg (large) as class names and numbers to represent how many columns the cell will occupy 
(Bootstrap uses a 12-column design). 
The above example responds to medium screen sizes only, if you want to make it respond to small and large screens, just append the lg, and sm classes:
<div class="col-sm-12 col-md-6 col-lg-6"></div>

You can learn more about Bootstrap and how to use their predefined classes here.
http://getbootstrap.com/css/

If you don't want to use these frameworks because you think it's overkill for your project 
( You just want to take advantage of their grid system, fonts, and CSS reset), 
then simply following the key ingredients (media queries, grid, fonts, etc) 
we discussed above will surely help you in building a responsive layout. 

Take note: a responsive layout. 
if you want your project to render and respond elegantly on all browsers, 
we have to incorporate these two final ingredients: CSS reset and Boilerplate