CASCADING STYLE SHEET

Browser Compatibility
Different browsers may give default attributes to HTML elements, 
causing sites to look different based on the version of the browser or whether you're seeing the site in IE, Firefox, Chrome, etc.  
For example in Internet Explorer, an H1 element may have certain margin and padding causing your site to look one way, 
while Chrome and Firefox may give the H1 a slightly different margin/padding.  
These differences can cause a headache, especially if you're trying to make your site look consistent throughout different browsers/versions.
To solve many cross-browser issues, it's encouraged that you use 'RESET' and 'NORMALIZE' (discussed below) 
and, basically, define what the default attributes should be (instead of relying on the default values that come with the browser).  
In fact, technical recruiters love to ask you about this and see if you know how to make your site look consistent throughout different browsers.  
When they ask you this, you should be able to explain (with confidence) what reset/normalizing means and why they are used.  
You should also tell them that in addition to this, it's important to validate your HTML/CSS often, 
as validating the HTML/CSS gives insight on how you can fix issues that may lead to cross-browser compatibility issues 
(and often, invalid HTML/CSS can lead to weird behavior as the browser may not 'fix' invalid HTML/CSS quite the right way).
CSS Reset
Here is a great explanation of what CSS resets are, why we use them, and some examples:
http://perishablepress.com/a-killer-collection-of-global-css-reset-styles/
Normalize
A widely used alternative to CSS resets is normalize.css.  Normalize.css also covers HTML5 elements. 
Find more information about what it does and why it might be preferable to CSS resets here:
https://github.com/necolas/normalize.css/

What does it do?

Preserves useful defaults, unlike many CSS resets.
Normalizes styles for a wide range of elements.
Corrects bugs and common browser inconsistencies.
Improves usability with subtle modifications.
Explains what code does using detailed comments.
Browser support

Chrome (last two)
Edge (last two)
Firefox (last two)
Firefox ESR
Internet Explorer 8+
iOS Safari (last two)
Opera (last two)
Safari 6+
[Normalize.css v1 provides legacy browser support] (https://github.com/necolas/normalize.css/tree/v1) (IE 6+, Safari 4+), but is no longer actively developed.

Extended details and known issues

Additional detail and explanation of the esoteric parts of normalize.css.

pre, code, kbd, samp

The font-family: monospace, monospace hack fixes the inheritance and scaling of font-size for preformatted text. The duplication of monospace is intentional. Source.

sub, sup

Normally, using sub or sup affects the line-box height of text in all browsers. Source.

svg:not(:root)

Adding overflow: hidden fixes IE9's SVG rendering. Earlier versions of IE don't support SVG, so we can safely use the :not() and :root selectors that modern browsers use in the default UA stylesheets to apply this style. Source.

select

By default, Chrome on OS X and Safari on OS X allow very limited styling of select, unless a border property is set. The default font weight on optgroup elements cannot safely be changed in Chrome on OSX and Safari on OS X.

[type="checkbox"]

It is recommended that you do not style checkbox and radio inputs as Firefox's implementation does not respect box-sizing, padding, or width.

[type="number"]

Certain font size values applied to number inputs cause the cursor style of the decrement button to change from default to text.

[type="search"]

The search input is not fully stylable by default. In Chrome and Safari on OSX/iOS you can't control font, padding, border, or background. In Chrome and Safari on Windows you can't control border properly. It will apply border-width but will only show a border color (which cannot be controlled) for the outer 1px of that border. Applying -webkit-appearance: textfield addresses these issues without removing the benefits of search inputs (e.g. showing past searches). Safari (but not Chrome) will clip the cancel button on when it has padding (and textfield appearance).

::placeholder

In Edge, placeholders will disappear on relative or absolute positioned <input> elements if you use opacity less than 1 due to a bug.

Contributing

Please read the contribution guidelines in order to make the contribution process easy and effective for everyone involved.

Acknowledgements

Normalize.css is a project by Nicolas Gallagher, co-created with Jonathan Neal.


VANESSA
1. Be careful about having too many divs. You have a few empty divs and divs with less than 2 direct children.
2. It is okay to user `<br>` but better to style the space using padding or margin in CSS. 
This is better practice because designs can change. 
You shouldn’t have to hunt down HTML tags and change them too. 
HTML for content, CSS for visuals.
3. Make use of your Parent Child Sibling (PCS) relationships. 
Instead of giving each of them images below a class you could have referenced them in the CSS by referring to the parent div. 
`div.icons img {}`

validate html
https://validator.w3.org/nu/#file

overflow hidden
height auto
position fixed -> for navigation toolbar always visible
aside css

10 CSS selectors you shouldn’t code without
https://www.webdesignerdepot.com/2013/08/10-css-selectors-you-shouldnt-code-without/

Every time we use CSS, we use selectors. 
But despite this, CSS selectors are one of the more neglected parts of the specification.
We talk about the big transformations in CSS3 but all too often forget the basics. 
Good use of selectors makes our day-to-day coding simpler and more elegant. 
Today I’m going to cover the 10 selectors that often slip our minds, 
but are both effective and highly useful.
 
*
The * selector may be the one you remember most easily but  it’s often underused. 
What it does is style everything on the page 
and it’s great for creating a reset and also for creating some page defaults 
like the font family and size you wish to have.
* {
   margin: 0;
   padding: 0;
   font-family: helvetica, arial, sans-serif;
   font-size: 16px;
}
 
A + B
This selector is called an adjacent selector and what it does is selects the element that is immediately after the first element. 
If you wanted to select the first div after our header you would type:
header + div {
   margin-top: 50px;
}
 
A > B
This selector will only select the direct children unlike A B that will select any level children of A. 
This selector is recommended for when you are working with first level children of a parent element. 
For example if you want to select the first level list items in an unordered list that looks like this:
<ul>
	<li>List Item With ul
		<ul>
			<li>Sub list item</li>
			<li>Sub list item</li>
			<li>Sub list item</li>
		</ul>
	</li>
	<li>List Item</li>
	<li>List Item</li>
</ul>
You would use this selector because the usual A B selector will also selected the list items inside the nested unordered list
ul > li {
   background: black;
   color: white;
}
 
A[HREF*=”EXAMPLE”]
This is a really good selector for when you want to style a particular link in a different way, 
whatever is in quotes will be matched against the href of the link. For example to style all links to facebook with the color blue you would use: 
a[href*="facebook"] {
   color: blue;
}
There is also a version without the * that matches the exact url that you can use for exact links.
 
A:NOT(B)
This selector if particularly useful because of it’s negation clause that allows you to select any group of elements that do not match what you place in B. 
If you want to select every div except the footer you just need: 
div:not(.footer) {
   margin-bottom: 40px;
}
 
A:FIRST-CHILD  / A:LAST-CHILD 
The first-child and last-child allow us to select the first and last child of the parent element. 
This can be a great help when it comes to list items and removing the margin-right or borders. 
To remove the border in the first list item and the margin in the last list item you need:
ul li:first-child {  
   border: none;  
}     
ul li:last-child {  
   margin-right: 0px;
}     
 
A:NTH-CHILD(N)
The nth-child is a simple way for you to select any child of an element by its order. 
If for example you wanted the third list item in an unordered list this would be the way to go:
ul li:nth-child(3) {
   background: #ccc;
}
We can use nth-child to select every multiplier of a number by using the variable n , 
for example if we put 3n it would select the list item number 3, 6, 9, 12 and so forth.
 
A:NTH-LAST-CHILD(N)
The nth-last-child works like the nth-child but instead of counting form the first list item it starts counting from the last, 
so if you use it with the number two it will select the list item that comes before the last one and its usage is just like the nth-child selector:
ul li:nth-last-child(2) {
   background: #ccc;
}
 
A:NTH-OF-TYPE(N)
This selector does exactly what you think it does; it sees what type of element you placed on it and it selects, 
for example, the third element on your page that matches what you typed. For selecting the third paragraph in a div you would use:
div p:nth-of-type(3) {
   font-style: italic;
}
 
A:VISITED
Ever noticed that when you search for something on google the pages you have already seen appear in a different color ? That is exactly what visited does. 
This is a great addition for the users but it’s sometimes forgotten and by my experience it’s comes in handy every time I search google.
a:visited {
   color: blue;
}
 
FINAL THOUGHTS
In my experience using these kinds of selectors when coding can save us a lot of time and also avoid the need for a lot of ID’s cluttering up our markup. 
And this is just the beginning of CSS selectors, there are plenty more selectors that are really handy but sometimes forgotten.

Extra Goodies
Lorem Ipsums
You've probably heard about Lorem Ipsum, the filler text of choice for many designers. Here are some untraditional Ipsums that might brighten your day. Feel free to pick and use whichever tickles your fancy! 

Faux Latin is a dead language - (Excerpts from classic novels!) http://www.fillerati.com/
Real gibberish - http://randomtextgenerator.com/
Online dating Ipsum - http://laurenhallden.com/datingipsum/
A delicious Ipsum - http://cupcakeipsum.com/
Beer Ipsum - http://breue.com/beer_ipsum
Arrested Development Ipsum - http://bluthipsum.com/
Futurama Ipsum - http://chrisvalleskey.com/fillerama/
Hipster Ipsum - http://hipsteripsum.me/
Bacon Ipsum - http://baconipsum.com/
Samuel L. Ipsum - http://slipsum.com/ (NSFW)
Gangsta Ipsum - http://lorizzle.nl/

Images and Backgrounds
Placeholder images for all your needs: http://lorempixel.com/
Because the internet needs more cats: http://placekitten.com/
Icon CSS Toolkit: https://fortawesome.github.io/Font-Awesome/
Free hi-res images: http://unsplash.com/
Backgrounds: http://subtlepatterns.com/
Various freebies including icons: http://www.webdesignerdepot.com/category/freebies/
Speaking of icons, you can use this site to generate CSS for sprite sheets: http://www.spritecow.com/
Color Schemes
Very flexible, very useful: http://colorschemedesigner.com/
Ever think "Oh man, I love the colors in this photo!"? So have I: http://www.degraeve.com/color-palette/index.php
Similar to above: http://www.cssdrive.com/imagepalette/
Other Tools
Cropper - Allows designer to measure pixels and crop images easily: http://cropper.codeplex.com/
Just Color Picker - Free portable color picker/editor: http://annystudio.com/software/colorpicker/#jcp-download
New Trends
Take these with a grain of salt - remember that trends come and go but good design is forever!
http://www.awwwards.com/6-web-design-trends-you-must-know-for-2015-2016.html

Text to HTML
This nifty tool will take your text files and add HTML markdown. Use it with caution and always double check the output!
http://daringfireball.net/projects/markdown/