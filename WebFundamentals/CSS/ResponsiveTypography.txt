So far we were able to achieve two key techniques for a responsive web design:

Fluid Grids - We learned how to use fluid width grid to contain blocks of content and control layout.

Adaptive Layouts - The use of @media queries to adapt designs to a variety of screen sizes.

Unfortunately, with only these two techniques, 
responsive sites struggle to maintain the integrity of their design the further you adjust your screen resolution from a set of defined width breakpoints. 
When it comes to responsive design on the web, 
there's more to do than just re-sizing the container and having the text reflow inside of it.

Responsive Typography
What if, in your stylesheet, there were 50 different font-size declarations in px. 
This means that when the screen size changes, you have 50 different places you need to change through a media query. 
Yikes! 

This is an unreasonable number, even for the most enormous of websites. 
But what if in your CSS file those 50 places were all specified in em. 
Now, through media queries, you would only need to change the font-size on the body: 
the change would cascade through the rest of the document, adjusting all sizes accordingly.

/* Default font size (for large screens) */
body {
  font-size: 1em; /* Defaults to 16px on most browsers */
}

/* For medium screens */
@media (max-width: 1000px) {
  body { font-size: .7em; }
}

/* For small screens */
@media (max-width: 500px) {
  body { font-size: 0.5em; }
}

Characters Per Line
When lines of text are too long, it makes reading slow, difficult and tiring. 
To avoid this, lines of text need to be easily parsed. 
The number of characters you put in each row is important. 
Here are the basic rules:

50 - 75 characters per line for medium to large screens
50 or below characters per line for small screens
For very large screens, you may want to split your content into multiple columns.
Stretching lines to fill a screen makes it difficult to read.  
Centering your content to a fixed width defeats the whole purpose of viewing content on wide screens.  
Instead, set your type in two columns (or three, depending on your font sizes).  
For example:

div {
    -webkit-column-count: 3; /* For Chrome, Safari, Opera */
    -moz-column-count: 3;    /* For Firefox browsers      */
    column-count: 3;
}

Note: The column-count property specifies the number of columns an element should be divided into. 
By specifying three columns, content in a single div will nonetheless be divided into three distinct columns, 
just as text appears in an old-fashioned (actual paper) newspaper. 

Golden Ratio Typography Calculator
The golden ratio calculator provides a guide -- a formula -- for proper typesetting. 
This very cool tool will recommend the best typography settings for different screen sizes. 
All you have to do is:

Determine the content width (the container that wraps the content), and 
Determine the desired CPL (characters per line)
Here's the link: http://www.pearsonified.com/typography/